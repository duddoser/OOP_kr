#include <bits/stdc++.h>
using namespace std;

int n = 11;
vector<vector<int>> graph = {
        { 0, 7, 8, 0, 0, 0, 14, 2, 43, 1, 2},
        { 7, 0, 11, 22, 3, 0, 0, 6, 0, 1, 1},
        { 8, 11, 0, 0, 9, 0, 7, 18, 4, 6, 10},
        { 0, 22, 0, 0, 1, 4, 1, 0, 2, 2, 6},
        { 0, 3, 9, 1, 0, 0, 16, 2, 3, 0, 3},
        { 0, 0, 0, 4, 0, 0, 3, 4, 7, 2, 1},
        { 14, 0, 7, 1, 16, 3, 0, 2, 0, 9, 6},
        { 2, 6, 18, 0, 2, 4, 2, 0, 8, 1, 0},
        { 43, 0, 4, 2, 3, 7, 0, 8, 0, 1, 2},
        { 1, 1, 6, 2, 0, 2, 9, 1, 1, 0, 2},
        { 2, 1, 10, 6, 3, 1, 6, 0, 2, 2, 0},
};


class Edge {
public:
    int from, to, weight;
    Edge(int from = -1, int to = -1, int weight = 0) : from(from), to(to), weight(weight) {}

    Edge(const Edge &E) {
        from = E.from;
        to = E.to;
        weight = E.weight;
    }

    Edge& operator=(Edge const& edge) {
        from = edge.from;
        to = edge.to;
        weight = edge.weight;
        return *this;
    }

    int operator<(Edge &E) {
        return (weight < E.weight);
    }

    friend ostream &operator<<(ostream &s, Edge &e);
};

ostream &operator<<(ostream &s, Edge &e) {
    if (e.weight != 0) {
        s << "From: " << e.from << ", to: " << e.to << ", weight: " << e.weight;
    }
    return s;
}


template <class T>
class BaseHeap {
    virtual void push(Edge edge) = 0;
    virtual int getCapacity() = 0;
    virtual int getCount() = 0;
    virtual void Swap(int index1, int index2) = 0;
    virtual Edge* GetLeftChild(int index) = 0;
    virtual Edge* GetRightChild(int index) = 0;
    virtual Edge* GetParent(int index) = 0;
    virtual int GetLeftChildIndex(int index) = 0;
    virtual int GetRightChildIndex(int index) = 0;
    virtual int GetParentIndex(int index) = 0;

protected:
    virtual ~BaseHeap();
};


template <class T>
class BinaryHeap {
protected:
    //массив
    Edge* arr;
    //сколько элементов добавлено
    int len;
    //сколько памяти выделено
    int size;
public:

    //доступ к вспомогательным полям кучи и оператор индекса
    int getCapacity() { return size; }
    int getCount() { return len; }

    Edge& operator[](int index)
    {
        if (index < 0 || index >= len) {
            throw out_of_range("Index is out of bounds in operator[].\n");
        }

        return arr[index];
    }

    //конструктор
    BinaryHeap<T> (int MemorySize = 100)
    {
        arr = new Edge[MemorySize];
        len = 0;
        size = MemorySize;
    }

    //поменять местами элементы arr[index1], arr[index2]
    void Swap(int index1, int index2)
    {
        if (index1 < 0 || index1 >= len) {
            throw out_of_range("Index1 " + to_string(index1) + " is out of bounds in Swap.\n");
        }

        if (index2 < 0 || index2 >= len) {
            throw out_of_range("Index2 " + to_string(index2) + " is out of bounds in Swap.\n");
        }

        Edge temp;
        temp = arr[index1];
        arr[index1] = arr[index2];
        arr[index2] = temp;
    }

    //скопировать данные между двумя узлами
    void Copy(Edge* dest, Edge* source) {
        dest = source;
    }

    Edge* pop(int index)
    {
        if (len == 0) return nullptr;
        if (index < 0 || index >= len) return nullptr;
        Edge* res = new Edge();
        Copy(res, &arr[index]);

        Swap(index, len - 1);
        len--;
        Heapify(index);

        return res;
    }

    //функции получения левого, правого дочернего элемента, родителя или их индексов в массиве
    Edge* GetLeftChild(int index)
    {
        if (index < 0 || index * 2 >= len) {
            throw out_of_range("Index is out of bounds in GetLeftChild.\n");
        }
        return &arr[index * 2 + 1];
    }

    Edge* GetRightChild(int index)
    {
        if (index < 0 || index * 2 >= len) {
            throw out_of_range("Index is out of bounds in GetRightChild.\n");
        }

        return &arr[index * 2 + 2];
    }

    Edge* GetParent(int index)
    {
        if (index < 0 || index >= len) {
            throw out_of_range("Index is out of bounds in GetParent.\n");
        }

        if (index % 2 == 0)
            return &arr[index / 2 - 1];
        return &arr[index / 2];
    }

    int GetLeftChildIndex(int index)
    {
        if (index < 0 || index * 2 >= len) {
            string msg = "Index " + to_string(index) + " is out of bounds in GetLeftChildIndex.\n";
//            throw out_of_range(msg);
        }
        return index * 2 + 1;
    }

    int GetRightChildIndex(int index)
    {
        if (index < 0 || index * 2 >= len) {
            string msg = "Index " + to_string(index) + " is out of bounds in GetRightChildIndex.\n";
//            throw out_of_range(msg);

        }

        return index * 2 + 2;
    }

    int GetParentIndex(int index)
    {
        if (index < 0 || index >= len) {
            string msg = "Index " + to_string(index) + " is out of bounds in GetParentIndex.\n";
            throw out_of_range(msg);
        }

        if (index % 2 == 0)
            return index / 2 - 1;
        return index / 2;
    }

    void Heapify(int index = 0)
    {
        //то же, что и SiftDown
        //нужно сравнить элементы и при необходимости произвести просеивание вниз
        if (len == 0) return;
        if (index < 0 || index >= len) return;

        int left_child_index = GetLeftChildIndex(index);
        int right_child_index = GetRightChildIndex(index);

        if (index * 2 + 1 >= len) return;
        int min_child_index = 0;

        if (index * 2 + 2 >= len) {
            min_child_index = left_child_index;
        } else {
            min_child_index = arr[left_child_index] < arr[right_child_index] ? left_child_index: right_child_index;
        }

        if (arr[min_child_index] < arr[index]) {
            Swap(min_child_index, index);
            Heapify(min_child_index);
        }
    }

    //просеить элемент вверх
    void SiftUp(int index = -1)
    {
        if (len == 0) return;
        if (index == -1) index = len - 1;
        int parent_index = GetParentIndex(index);
        if (parent_index < 0) return;
        //нужно сравнить элементы и при необходимости произвести просеивание вверх
        if (arr[index] < arr[parent_index] ) {
            Swap(parent_index, index);
            SiftUp(parent_index);
        }
    }

    //добавление элемента - вставляем его в конец массива и просеиваем вверх
    void push(Edge edge) {
        if (len < size) {
            arr[len] = edge;
            len++;
        } else {
            size = len + 1;
            arr = new Edge[len + 1];
            arr[len] = edge;
            len++;
        }
        SiftUp();
    }

    Edge ExtractMin()
    {
        //исключить максимум и запустить просеивание кучи
        if (len == 0) return NULL;
        Edge res = arr[0];
        Swap(0, len - 1);
        len--;
        Heapify();

        return res;
    }

    //перечислить элементы кучи и применить к ним функцию
    void Straight(void(*f)(Edge*))
    {
        int i;
        for (i = 0; i < len; i++) {
            f(&arr[i]);
        }
    }

    //перебор элементов, аналогичный проходам бинарного дерева
    void PreOrder(void(*f)(Edge*), int index = 0)
    {
        if (index >= 0 && index < len)
            f(&arr[index]);
        if (GetLeftChildIndex(index) < len)
            PreOrder(f, GetLeftChildIndex(index));
        if (GetRightChildIndex(index) < len)
            PreOrder(f, GetRightChildIndex(index));
    }

    void InOrder(void(*f)(Edge*), int index = 0)
    {
        if (GetLeftChildIndex(index) < len)
            PreOrder(f, GetLeftChildIndex(index));
        if (index >= 0 && index < len)
            f(&arr[index]);
        if (GetRightChildIndex(index) < len)
            PreOrder(f, GetRightChildIndex(index));
    }

    void PostOrder(void(*f)(Edge*), int index = 0)
    {
        if (GetLeftChildIndex(index) < len)
            PreOrder(f, GetLeftChildIndex(index));
        if (GetRightChildIndex(index) < len)
            PreOrder(f, GetRightChildIndex(index));
        if (index >= 0 && index < len)
            f(&arr[index]);
    }

    bool empty() {
        if (len > 0) {
            return false;
        } else {
            return true;
        }
    }

    void printHeap(){
        for (int i = 0; i < len; ++i) {
            cout << arr[i] << endl;
        }
    }

    ~BinaryHeap() {}
};


int prima() {
    int mst_weight = 0;
    BinaryHeap<Edge> edges;		//рассматриваемые ребра
    BinaryHeap<Edge> mst_edges;	//ребра в минимальном остове
    vector<int> used(n, 0);

    edges.push(Edge(0, 0, 0));

    while (!edges.empty()) {
        Edge edge = edges.ExtractMin();
        int to = edge.to;
        int from = edge.from;
        int w = edge.weight;

        if (used[to]) continue;
        used[to] = 1;

        mst_weight += w;
        mst_edges.push(Edge(from, to, w));
        for ( int i = 0; i < n ; i++ ) {
            if ( graph[to][i] > 0 && !used[i] ) {
                edges.push(Edge(to, i, graph[to][i]));
            }
        }
    }

    mst_edges.printHeap();
    return mst_weight;
}


class DissjointSetUnion{
protected:
    int* parent;
    int* rank;

public:
    DissjointSetUnion(int memory_size = 100) {
        parent = new int[memory_size];
        rank = new int[memory_size];
    }

    void make_set(int v) {
        parent[v] = v;
        rank[v] = 0;
    }

    int find_set(int v) {
        if (v == parent[v])
            return v;
        return parent[v] = find_set(parent[v]);
    }

    void union_sets(int a, int b) {
        a = find_set(a);
        b = find_set(b);
        if (a != b) {
            if (rank[a] < rank[b])
                swap(a, b);
            parent[b] = a;
            if (rank[a] == rank[b])
                rank[a]++;
        }
    }

    ~DissjointSetUnion() {}
};


int main() {
    cout << "------------------- Prima --------------------" << endl;
    int min_span_tree = prima();
    cout << "MST weight: " << min_span_tree << endl;

    cout << "------------------- Kruskala --------------------" << endl;
    vector<Edge> edges; // можно заменить на стек
    BinaryHeap<Edge> result;
    DissjointSetUnion dsu(n);
    int kruskala_weight = 0;

    for (int i = 0; i < n; ++i) {
        for (int j = i + 1; j < n; ++j) {
            if (graph[i][j] > 0) {
                edges.emplace_back(i, j, graph[i][j]);
            }
        }
    }

    for (int i = 0; i < n; i++)
        dsu.make_set(i);

    sort(edges.begin(), edges.end());

    for (Edge e : edges) {
        if (dsu.find_set(e.from) != dsu.find_set(e.to)) {
            kruskala_weight += e.weight;
            result.push(e);
            dsu.union_sets(e.from, e.to);
        }
    }

    result.printHeap();
    cout << kruskala_weight << endl;

    return 0;
}